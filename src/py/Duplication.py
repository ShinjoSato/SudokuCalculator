# -*- coding: utf8 -*-
from Sudoku import Sudoku
class Duplication(Sudoku):
    def searchLackingNumbersSet(self, matrixes):
        numbersSet=[]
        for matrix in matrixes:
            numbersSet.append(super().searchLackingNumbers(matrix))
        return numbersSet

    def canPutNumberOnDuplicationPlace(self, place, matrixes, id, num, duplications):
        if not(self.canPutNumberOnPlace(place,matrixes[id],num)):
            return False
        if(0<len(duplications[id][place[0]][place[1]])):
            for g in range(0,len(duplications[id][place[0]][place[1]])):
                # the size of matrix < num
                if(len( matrixes[ duplications[id][place[0]][place[1]][g][0] ] )<num):
                    return False
        for i in range(0,len(duplications[id][place[0]][place[1]])):
            matrix_id=duplications[id][place[0]][place[1]][i][0]
            dup_place=[duplications[id][place[0]][place[1]][i][1], duplications[id][place[0]][place[1]][i][2]]
            if not(super().canPutNumberOnPlace(dup_place, matrixes[matrix_id], num)):
                return False
        return True

    def searchEmptyPlacesSet(self,matrixes):
        placesSet=[]
        for matrix in matrixes:
            placesSet.append(super().searchEmptyPlaces(matrix))
        return placesSet

    def fillMatrixesIntoNumbers(self, matrixes, numbersSet, placesSet, duplications):
        len_numbers=0
        for numbers in numbersSet:
            len_numbers+=len(numbers)
        if(len_numbers==0):
            for matrix in matrixes:
                super().printMatrix(matrix)
                print()
            return matrixes
        else:
            #iはcandidateの個数の閾値で、選択肢が少ないところを深掘りさせるためのfor文
            for i in range(0,len(placesSet)):
                for place in placesSet[i]:
                    initial=0
                    candidate=[]
                    for num in numbersSet[i]:
                        if(initial != num):
                            initial=num
                            if(self.canPutNumberOnDuplicationPlace(place, matrixes, i, num, duplications)):
                                candidate.append(num)
                    if(len(candidate)<3):
                        for c in candidate:
                            idx_place=placesSet[i].index(place)
                            idx_num=numbersSet[i].index(c)
                            placesSet[i].remove(place)
                            numbersSet[i].remove(c)
                            matrixes[i][place[0]][place[1]]=c
                            #重複されているなら
                            if(0<len(duplications[i][place[0]][place[1]])):
                                #重複箇所に加える
                                dup_matrix_id_list=[]
                                dup_place_list=[]
                                idx_dup_place_list=[]
                                idx_dup_num_list=[]
                                for g in range(0, len(duplications[i][place[0]][place[1]])):
                                    dup_matrix_id_list.append(duplications[i][place[0]][place[1]][g][0])
                                    dup_place_list.append([duplications[i][place[0]][place[1]][g][1], duplications[i][place[0]][place[1]][g][2]])
                                    idx_dup_place_list.append(placesSet[dup_matrix_id_list[g]].index(dup_place_list[g]))
                                    idx_dup_num_list.append(numbersSet[dup_matrix_id_list[g]].index(c))

                                for g in range(0, len(duplications[i][place[0]][place[1]])):
                                    placesSet[dup_matrix_id_list[g]].remove(dup_place_list[g])
                                    numbersSet[dup_matrix_id_list[g]].remove(c)
                                    matrixes[dup_matrix_id_list[g]][dup_place_list[g][0]][dup_place_list[g][1]]=c
                                #Recursion
                                result=self.fillMatrixesIntoNumbers(matrixes, numbersSet, placesSet, duplications)
                                if not(result==[]):
                                    return result
                                #重複箇所のを省く
                                for g in range(0, len(duplications[i][place[0]][place[1]])):
                                    matrixes[dup_matrix_id_list[g]][dup_place_list[g][0]][dup_place_list[g][1]]=0
                                    numbersSet[dup_matrix_id_list[g]].insert(idx_dup_num_list[g], c)
                                    placesSet[dup_matrix_id_list[g]].insert(idx_dup_place_list[g], dup_place_list[g])
                            else:
                                #Recursion
                                result=self.fillMatrixesIntoNumbers(matrixes, numbersSet, placesSet, duplications)
                                if not(result==[]):
                                    return result
                            matrixes[i][place[0]][place[1]]=0
                            numbersSet[i].insert(idx_num, c)
                            placesSet[i].insert(idx_place, place)
                        return []
            return []


if __name__ == "__main__":
    #Question 11s
    matrixes=[
        [#1
            [2,0,0,  5,0,0],
            [0,5,0,  0,0,3],

            [0,0,0,  0,5,0],
            [0,4,6,  0,0,2],

            [6,0,0,  1,0,0],
            [0,0,0,  0,0,0]
        ],[#2
            [0,0,0,  0,7,0,  0,0,0],
            [1,0,0,  4,0,9,  0,5,0],
            [0,0,5,  0,0,0,  0,0,8],

            [0,2,0,  0,5,0,  9,0,1],
            [5,0,4,  0,0,6,  8,0,0],
            [3,0,0,  1,0,0,  0,6,0],

            [0,5,0,  0,6,0,  0,0,9],
            [0,0,2,  7,0,4,  0,0,0],
            [4,3,0,  0,1,0,  0,0,0]
        ],[#3
            [7,0,9,  0,8,0,  0,2,0],
            [4,0,0,  3,0,6,  9,0,0],
            [0,1,0,  0,0,7,  0,5,6],

            [9,0,1,  0,7,0,  5,0,0],
            [0,5,0,  6,0,0,  1,0,8],
            [0,0,8,  0,0,5,  0,4,0],

            [5,0,0,  0,1,0,  0,0,0],
            [8,0,6,  7,0,0,  4,0,0],
            [0,0,0,  2,0,8,  0,0,0]
        ],[#4
            [0,0,0,  7,0,2,  0,0,0],
            [0,0,0,  0,1,0,  7,0,0],
            [0,0,4,  0,8,3,  0,0,0],

            [0,2,0,  1,0,0,  6,0,4],
            [0,0,1,  0,9,4,  0,3,0],
            [0,3,0,  5,0,0,  8,0,0],

            [0,0,2,  0,0,0,  1,7,0],
            [0,0,0,  2,0,8,  0,0,9],
            [0,5,7,  0,6,0,  3,0,0]
        ],[#5
            [7,3,0,  0,0,4,  0,0,0],
            [0,0,9,  2,0,0,  1,0,0],
            [6,0,0,  0,9,0,  7,0,0],

            [0,5,0,  9,1,0,  6,0,0],
            [0,9,6,  0,0,8,  0,7,0],
            [1,8,0,  3,0,0,  0,0,0],

            [0,7,4,  0,5,0,  8,0,0],
            [9,0,0,  0,8,2,  0,1,0],
            [0,0,8,  7,0,0,  4,0,2]
        ],[#6
            [0,0,12,0,    11,0,0,3,   0,10,0,0],
            [0,0,4,6,      0,0,0,0,    2,11,0,0],
            [0,0,0,11,    0,4,2,0,    12,0,0,0],

            [11,0,3,0,    5,0,0,1,    0,4,0,10],
            [0,12,0,0,    4,0,0,2,    0,0,6,0],
            [10,0,0,4,    0,9,7,0,    1,0,0,3],

            [0,10,0,0,    3,0,0,5,    0,0,2,0],
            [0,0,8,9,    0,0,0,0,    3,6,0,0],
            [7,11,0,0,    0,12,6,0,   0,0,10,5],

            [0,0,0,12,    0,7,4,0,    10,0,0,0],
            [0,0,9,0,    6,0,0,12,    0,8,0,0],
            [0,0,0,5,    0,11,3,0,    6,0,0,0]
        ],[#7
            [0,5,0,  0,1,0,  2,0,7],
            [0,0,7,  4,0,2,  0,0,5],
            [6,2,0,  7,0,0,  0,9,0],

            [0,0,1,  0,4,0,  3,0,2],
            [9,0,6,  0,0,5,  0,8,0],
            [0,4,0,  3,0,0,  9,0,0],

            [0,0,0,  0,7,0,  0,0,3],
            [0,0,2,  0,0,1,  4,0,6],
            [0,0,0,  6,0,4,  0,0,0]
        ],[#8
            [0,0,0,  1,0,7,  0,0,0],
            [0,0,8,  0,2,0,  0,0,0],
            [0,0,0,  8,3,0,  1,0,0],

            [3,0,7,  0,0,6,  0,2,0],
            [0,1,0,  7,5,0,  6,0,0],
            [0,0,9,  0,0,8,  0,4,0],

            [0,9,1,  0,0,0,  2,0,0],
            [4,0,0,  2,0,9,  0,0,0],
            [0,0,2,  0,7,0,  3,5,0]
        ],[#9
            [0,0,0,  0,4,0,  0,0,0],
            [0,7,0,  2,0,3,  0,0,9],
            [3,0,0,  0,0,0,  4,0,0],

            [5,0,3,  0,2,0,  0,8,0],
            [0,0,8,  3,0,0,  9,0,1],
            [0,9,0,  0,0,6,  0,0,5],

            [7,0,0,  0,3,0,  0,4,0],
            [0,0,0,  1,0,2,  5,0,0],
            [0,0,0,  0,6,0,  0,1,7]
        ],[#10
            [0,0,5,  0,0,1],
            [4,0,0,  0,5,0],

            [0,2,0,  0,0,0],
            [1,0,0,  2,4,0],

            [0,0,2,  0,0,5],
            [0,0,0,  0,0,0]
        ],[#11
            [0,0,0,  9,0,0,  0,7,3],
            [0,0,9,  0,0,1,  4,0,0],
            [0,0,5,  0,4,0,  0,0,6],

            [0,0,2,  0,1,9,  0,8,0],
            [0,1,0,  4,0,0,  2,9,0],
            [0,0,0,  0,0,7,  0,4,1],

            [0,0,1,  0,3,0,  7,5,0],
            [0,3,0,  1,9,0,  0,0,4],
            [2,0,4,  0,0,5,  1,0,0]
        ]
    ]
    duplications=[
        [#1
            [[],[],[],  [],[],[]],
            [[],[],[],  [],[],[]],

            [[],[],[],  [],[],[]],
            [[],[],[],  [],[],[]],

            [[],[],[],  [],[],[]],
            [[],[],[[1,0,0]],  [[1,0,1]],[[1,0,2]],[[1,0,3]]],
        ],[#2
            [[[0,5,2]],[[0,5,3]],[[0,5,4]],  [[0,5,5]],[],[],  [[2,8,0]],[[2,8,1]],[[2,8,2]]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [[3,0,0]],[[3,0,1]],[[3,0,2]]],
            [[],[],[],  [],[],[],  [[3,1,0]],[[3,1,1]],[[3,1,2]]]
        ],[#3
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[[5,0,0]],[[5,0,1]]],
            [[],[],[],  [],[],[],  [],[[5,1,0]],[[5,1,1]]],
            [[[1,0,6]],[[1,0,7]],[[1,0,8]],  [],[],[],  [],[[5,2,0]],[[5,2,1]]]
        ],[#4
            [[[1,7,6]],[[1,7,7]],[[1,7,8]],  [],[],[],  [],[[5,9,0]],[[5,9,1]]],
            [[[1,8,6]],[[1,8,7]],[[1,8,8]],  [],[],[],  [],[[5,10,0]],[[5,10,1]]],
            [[],[],[],  [],[],[],  [],[[5,11,0]],[[5,11,1]]],

            [[[4,0,8]],[],[],  [],[],[],  [],[],[]],
            [[[4,1,8]],[],[],  [],[],[],  [],[],[]],
            [[[4,2,8]],[],[],  [],[],[],  [],[],[]],

            [[[4,3,8]],[],[],  [],[],[],  [],[],[]],
            [[[4,4,8]],[],[],  [],[],[],  [],[],[]],
            [[[4,5,8]],[],[],  [],[],[],  [],[],[]]
        ],[#5
            [[],[],[],  [],[],[],  [],[],[[3,3,0]]],
            [[],[],[],  [],[],[],  [],[],[[3,4,0]]],
            [[],[],[],  [],[],[],  [],[],[[3,5,0]]],

            [[],[],[],  [],[],[],  [],[],[[3,6,0]]],
            [[],[],[],  [],[],[],  [],[],[[3,7,0]]],
            [[],[],[],  [],[],[],  [],[],[[3,8,0]]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]]
        ],[#6
            [[[2,6,7]],[[2,6,8]],[],[],   [],[],[],[],   [],[],[[6,6,0]],[[6,6,1]]],
            [[[2,7,7]],[[2,7,8]],[],[],   [],[],[],[],   [],[],[[6,7,0]],[[6,7,1]]],
            [[[2,8,7]],[[2,8,8]],[],[],   [],[],[],[],   [],[],[[6,8,0]],[[6,8,1]]],

            [[],[],[],[],   [],[],[],[],   [],[],[],[]],
            [[],[],[],[],   [],[],[],[],   [],[],[],[]],
            [[],[],[],[],   [],[],[],[],   [],[],[],[]],

            [[],[],[],[],   [],[],[],[],   [],[],[],[]],
            [[],[],[],[],   [],[],[],[],   [],[],[],[]],
            [[],[],[],[],   [],[],[],[],   [],[],[],[]],

            [[[3,0,7]],[[3,0,8]],[],[],   [],[],[],[],   [],[],[[7,0,0]],[[7,0,1]]],
            [[[3,1,7]],[[3,1,8]],[],[],   [],[],[],[],   [],[],[[7,1,0]],[[7,1,1]]],
            [[[3,2,7]],[[3,2,8]],[],[],   [],[],[],[],   [],[],[[7,2,0]],[[7,2,1]]]
        ],[#7
            [[],[],[],  [],[],[], [],[],[]],
            [[],[],[],  [],[],[], [],[],[]],
            [[],[],[],  [],[],[], [],[],[]],

            [[],[],[],  [],[],[], [],[],[]],
            [[],[],[],  [],[],[], [],[],[]],
            [[],[],[],  [],[],[], [],[],[]],

            [[[5,0,10]],[[5,0,11]],[],  [],[],[], [],[],[]],
            [[[5,1,10]],[[5,1,11]],[],  [],[],[], [],[],[]],
            [[[5,2,10]],[[5,2,11]],[],  [],[],[], [[8,0,0]],[[8,0,1]],[[8,0,2]]]
        ],[#8
            [[[5, 9,10]],[[5, 9,11]],[],  [],[],[],  [[8,7,0]],[[8,7,1]],[[8,7,2]]],
            [[[5,10,10]],[[5,10,11]],[],  [],[],[],  [[8,8,0]],[[8,8,1]],[[8,8,2]]],
            [[[5,11,10]],[[5,11,11]],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[[10,0,0]]],
            [[],[],[],  [],[],[],  [],[],[[10,1,0]]],
            [[],[],[],  [],[],[],  [],[],[[10,2,0]]],

            [[],[],[],  [],[],[],  [],[],[[10,3,0]]],
            [[],[],[],  [],[],[],  [],[],[[10,4,0]]],
            [[],[],[],  [],[],[],  [],[],[[10,5,0]]]
        ],[#9
            [[[6,8,6]],[[6,8,7]],[[6,8,8]],  [],[],[[9,5,0]],  [[9,5,1]],[[9,5,2]],[[9,5,3]]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[[7,0,6]],[[7,0,7]],[[7,0,8]],  [],[],[],  [],[],[]],
            [[[7,1,6]],[[7,1,7]],[[7,1,8]],  [],[],[],  [],[],[]]
        ],[#10
            [[],[],[],  [],[],[]],
            [[],[],[],  [],[],[]],

            [[],[],[],  [],[],[]],
            [[],[],[],  [],[],[]],

            [[],[],[],  [],[],[]],
            [[[8,0,5]],[[8,0,6]],[[8,0,7]],  [[8,0,8]],[],[]]
        ],[#11
            [[[7,3,8]],[],[],  [],[],[],  [],[],[]],
            [[[7,4,8]],[],[],  [],[],[],  [],[],[]],
            [[[7,5,8]],[],[],  [],[],[],  [],[],[]],

            [[[7,6,8]],[],[],  [],[],[],  [],[],[]],
            [[[7,7,8]],[],[],  [],[],[],  [],[],[]],
            [[[7,8,8]],[],[],  [],[],[],  [],[],[]],

            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]],
            [[],[],[],  [],[],[],  [],[],[]]
        ]
    ]

    sudoku = Duplication()
    result=sudoku.fillMatrixesIntoNumbers(matrixes, sudoku.searchLackingNumbersSet(matrixes), sudoku.searchEmptyPlacesSet(matrixes), duplications)
    if not(result==[]):
        print('SUCCESS!!')
    else:
        print("FAIL")
